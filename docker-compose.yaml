# This file extends the Astro docker-compose setup with additional services
# It will be automatically loaded by docker-compose when running astro dev start

services:
  # MLflow tracking server
  mlflow:
    build:
      context: .
      dockerfile: docker/Dockerfile.mlflow
    platform: linux/arm64
    ports:
      - '5001:5001'
    env_file:
      - .env
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - MLFLOW_HOST=0.0.0.0
      - MLFLOW_PORT=5001
      - MLFLOW_DB_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@mlflow-db:${POSTGRES_PORT}/${POSTGRES_DB}
      - MLFLOW_ARTIFACT_ROOT=s3://${AWS_S3_BUCKET}
    depends_on:
      mlflow-db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - airflow
      - default
    restart: unless-stopped

  # PostgreSQL for MLflow
  mlflow-db:
    image: postgres:17.5-bookworm
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - mlflow-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', '${POSTGRES_USER}']
      interval: 5s
      retries: 5
    networks:
      - airflow
      - default
    restart: unless-stopped

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    platform: linux/arm64
    command: server /data --console-address ":9001"
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - airflow
      - default
    restart: unless-stopped

  # Create MLflow bucket in MinIO
  minio-mc:
    image: minio/mc:RELEASE.2025-07-21T05-28-08Z
    platform: linux/arm64
    env_file:
      - .env
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set myminio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      mc mb myminio/${AWS_S3_BUCKET} || true;
      mc anonymous set public myminio/${AWS_S3_BUCKET};
      exit 0;
      "
    networks:
      - airflow
      - default

  # Add Redis to the Airflow network for Celery if needed
  redis:
    image: redis:8.2-bookworm
    platform: linux/arm64
    profiles: ["dev"]
    expose:
      - 6379
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 30s
      retries: 50
    restart: unless-stopped
    networks:
      - airflow
      - default

  # Streamlit UI for model inference
  streamlit-ui:
    image: python:3.12-slim
    platform: linux/arm64
    working_dir: /app
    profiles: ["dev"]
    command: >
      bash -c "
      apt-get update && apt-get install -y libgomp1 build-essential cmake &&
      pip install --no-cache-dir streamlit==1.29.0 pandas==2.3.2 scikit-learn==1.7.1 matplotlib==3.10.6 seaborn==0.13.0 plotly==5.18.0 mlflow==3.3.2 boto3==1.34.14 lightgbm==4.6.0 xgboost==3.0.4 &&
      chmod +x /app/entrypoint.sh &&
      /app/entrypoint.sh
      "
    ports:
      - '8501:8501'
    env_file:
      - .env
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5001
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    volumes:
      - ./ui:/app
      - ./include:/usr/local/airflow/include:ro
    depends_on:
      - mlflow
      - minio
    restart: unless-stopped
    networks:
      - airflow
      - default

volumes:
  mlflow-db-volume:
  minio-data:

networks:
  airflow:
    external: true
    # run: docker network create astro-sales-forecast_eaa509_airflow
    name: astro-sales-forecast_eaa509_airflow
  default:
    name: astro-sales-forecast_eaa509_default